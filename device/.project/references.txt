! CONTEXT:
	/protocol/
		&<http://if.fault.io/chapters/project.documentation>

[ macOS ]

/Apple Developer Documentation/
	&<https://developer.apple.com/documentation/>

	Apple's documentation seems to vary in quality. Likely in part due to the swift
	transition and the expectation of Xcode usage. Supplementary resources were
	often critical for usage. However, judgement may not be fair due to the
	author's limited Objective-C and Swift experience.
/CGBitmapContext/
	&<https://developer.apple.com/documentation/coregraphics/cgbitmapcontext>

	Method used for rasterizing the cached images of a cell.
	A critical point being the configuration of the scale factor for proper
	high resolution support: `CGContextScaleCTM` is given the `backingScaleFactor`
	of the target window.

	Windows should likely be screen locked here in order to avoid resolution mismatches;
	the application seeks to avoid or limit window change events as the expected usage
	is constant fullscreen for the duration of the application.
/NSImage Drawing Handler/
	&<https://developer.apple.com/documentation/appkit/nsimage/1519860-imagewithsize>

	Likely superior solution for rasterizing cells as it will automatically adjust
	for the resolution of the target context being drawn in.
/Bitmap Captures for Smooth Scrolling Support/
	&<https://developer.apple.com/documentation/appkit/nsview/1483552-cachedisplayinrect>

	Repeatedly dirty the scroll area and shift the image in the scroll direction until
	the final image is reached.
/Transparency/
	&<https://discussions.apple.com/thread/1772438>

[ > charactersIgnoringModifiers ]

macOS' cocoa API lies about its function and will report the modifier applied character
in certain circumstances(number keys and most punctuation). Apparently, manual translating
is or was a common workaround.

	- &<https://github.com/panda3d/panda3d/pull/967>
	- &<https://github.com/OmarEmaraDev/blender/commit/75658109bebade083eb77b3a07718a3eb4d5d095>
	- &<https://source.chromium.org/chromium/chromium/src/+/HEAD:ui/events/keycodes/keyboard_code_conversion_mac.mm>

[ > mainMenu ]

For some time, starting the application would yield an unclickable menubar where switching
away and back would allow screen cursor events to be recognized. Apparently common
when constructing the menu bar from code, this quirk disappeared after minor
restructuring of the initialization procedures.

	- &<https://stackoverflow.com/questions/33345686/cocoa-application-menu-bar-not-clickable>

However, Apple introduced a new method in 10.15:

	- &<https://developer.apple.com/documentation/appkit/nsevent/3242717-charactersbyapplyingmodifiers?language=objc>

[ > Fonts ]

/Loading from URLs/
	- &<https://stackoverflow.com/questions/2703085/how-can-you-load-a-font-ttf-from-a-file-using-core-text>
/Sizing/
	- &<https://developer.apple.com/documentation/foundation/nsattributedstring/1529154-boundingrectwithsize>

	Unfortunately, there does not appear to be a direct method for extracting a
	useful bounding box for a monospaced cell. &NS.Font.boundingRectForFont may
	be accurate, but is often unusable without modification. Using an attributed
	string consisting of characters known, expected, to be cell units provides
	fairly accurate starting measurements.

[ > Caching ]

Predominately, NSCache oriented. A minor issue for the implementation being the
Cell structure not being an NSObject. Whenever a cell image lookup is performed, a new
key object is allocated and discarded. Creation during a cache miss is desired, but
not on hits.

- &<https://stackoverflow.com/questions/33282502/any-way-to-store-struct-in-nscache>
- &<https://stackoverflow.com/questions/38890174/use-nsvalue-to-wrap-a-c-pointer>
- &<https://stackoverflow.com/questions/12423627/objective-c-allocating-objects-on-the-stack>

[ XDG XCB ]

Specifically: libxcb, cairo, and pango. Wayland is not directly supported here, but this
device may be usable with Wayland servers given working X11 compatibility.

/XCB/
	- &<https://www.x.org/releases/current/doc/man/man3/>
	- &<https://xcb.freedesktop.org/manual/modules.html>
	- &<https://xcb.freedesktop.org/tutorial>
	- &<https://xcb.freedesktop.org/PublicApi>
/xkbcommon/
	&<https://github.com/xkbcommon/libxkbcommon/blob/master/tools/interactive-x11.c>

	The raw keyboard events read from XCB do not manage and report modifier state;
	modifiers are just regular keys at this level. While substantial,
	the solution provided in `interactive-x11.c` appears complete.
/Cairo/
	- &<https://www.cairographics.org>
/Pango/
	- &<https://docs.gtk.org/Pango>
	- &<https://github.com/GNOME/pango>
/Multibyte Characters/
	- (system/manual)`c32rtomb`
	- (system/manual)`mbrtoc32`
	- &<https://man7.org/linux/man-pages/man3/mbstate_t.3type.html>

	(syntax/c)`setlocale(LC_CTYPE, "C.UTF-8")` is needed to portably trigger
	the necessary behavior.

[ > Fonts ]

Pango's interpretation is solely depended on. However, pango offers much more than is needed,
and working directly with Xft might be worth the effort. This does not appear to be a well
trodden path, but modern xterm should offer a full example.

[ > Caching ]

Not implemented. Pango appears to be fairly efficient even with unoptimized usage.
